{
  "../asts/main/ast.json": [
    {
      "methodName": "assertTrue",
      "methodCallLine": "assertTrue([complex expression])",
      "line": "18-18"
    },
    {
      "methodName": "addProvider",
      "methodCallLine": "[complex expression].addProvider([complex expression])",
      "line": "17-17"
    },
    {
      "methodName": "println",
      "methodCallLine": "[complex expression].println([complex expression])",
      "line": "21-21"
    },
    {
      "methodName": "println",
      "methodCallLine": "[complex expression].println([complex expression])",
      "line": "25-25"
    },
    {
      "methodName": "sayHello",
      "methodCallLine": "sayHello()",
      "line": "31-31"
    },
    {
      "methodName": "getInstance",
      "methodCallLine": "[complex expression].getInstance([complex expression], [complex expression])",
      "line": "33-33"
    },
    {
      "methodName": "getBytes",
      "methodCallLine": "[complex expression].getBytes()",
      "line": "34-34"
    },
    {
      "methodName": "println",
      "methodCallLine": "[complex expression].println([complex expression])",
      "line": "35-35"
    },
    {
      "methodName": "init",
      "methodCallLine": "[complex expression].init([complex expression], [complex expression])",
      "line": "38-38"
    },
    {
      "methodName": "doFinal",
      "methodCallLine": "[complex expression].doFinal([complex expression])",
      "line": "39-39"
    },
    {
      "methodName": "getBytes",
      "methodCallLine": "[complex expression].getBytes()",
      "line": "39-39"
    },
    {
      "methodName": "encodeToString",
      "methodCallLine": "[complex expression].encodeToString([complex expression])",
      "line": "40-40"
    },
    {
      "methodName": "getEncoder",
      "methodCallLine": "[complex expression].getEncoder()",
      "line": "40-40"
    },
    {
      "methodName": "println",
      "methodCallLine": "[complex expression].println([complex expression])",
      "line": "41-41"
    },
    {
      "methodName": "init",
      "methodCallLine": "[complex expression].init([complex expression], [complex expression])",
      "line": "44-44"
    },
    {
      "methodName": "doFinal",
      "methodCallLine": "[complex expression].doFinal([complex expression])",
      "line": "45-45"
    },
    {
      "methodName": "decode",
      "methodCallLine": "[complex expression].decode([complex expression])",
      "line": "45-45"
    },
    {
      "methodName": "getDecoder",
      "methodCallLine": "[complex expression].getDecoder()",
      "line": "45-45"
    },
    {
      "methodName": "println",
      "methodCallLine": "[complex expression].println([complex expression])",
      "line": "46-46"
    },
    {
      "methodName": "setPassword",
      "methodCallLine": "[complex expression].setPassword([complex expression])",
      "line": "50-50"
    },
    {
      "methodName": "encrypt",
      "methodCallLine": "[complex expression].encrypt([complex expression])",
      "line": "53-53"
    },
    {
      "methodName": "println",
      "methodCallLine": "[complex expression].println([complex expression])",
      "line": "54-54"
    },
    {
      "methodName": "decrypt",
      "methodCallLine": "[complex expression].decrypt([complex expression])",
      "line": "57-57"
    },
    {
      "methodName": "println",
      "methodCallLine": "[complex expression].println([complex expression])",
      "line": "58-58"
    },
    {
      "methodName": "setProperty",
      "methodCallLine": "[complex expression].setProperty([complex expression], [complex expression])",
      "line": "62-62"
    },
    {
      "methodName": "getCipherInstance",
      "methodCallLine": "[complex expression].getCipherInstance([complex expression], [complex expression])",
      "line": "63-63",
      "thirdPartyInfo": {
        "external_functions": [
          "getCryptoCipher"
        ],
        "internal_functions": [],
        "self": {
          "line": "54-60",
          "file": "../asts/Utils.json",
          "className": "Optional[org.apache.commons.crypto.utils.Utils]"
        }
      }
    },
    {
      "methodName": "getBytes",
      "methodCallLine": "[complex expression].getBytes()",
      "line": "64-64"
    },
    {
      "methodName": "init",
      "methodCallLine": "[complex expression].init([complex expression], [complex expression], [complex expression])",
      "line": "68-68"
    },
    {
      "methodName": "update",
      "methodCallLine": "[complex expression].update([complex expression], [complex expression], [complex expression], [complex expression], [complex expression])",
      "line": "69-69"
    },
    {
      "methodName": "getBytes",
      "methodCallLine": "[complex expression].getBytes()",
      "line": "69-69"
    },
    {
      "methodName": "getBytes",
      "methodCallLine": "[complex expression].getBytes()",
      "line": "69-69"
    },
    {
      "methodName": "doFinal",
      "methodCallLine": "[complex expression].doFinal([complex expression], [complex expression], [complex expression], [complex expression], [complex expression])",
      "line": "70-70"
    },
    {
      "methodName": "getBytes",
      "methodCallLine": "[complex expression].getBytes()",
      "line": "70-70"
    },
    {
      "methodName": "arraycopy",
      "methodCallLine": "[complex expression].arraycopy([complex expression], [complex expression], [complex expression], [complex expression], [complex expression])",
      "line": "72-72"
    },
    {
      "methodName": "encodeToString",
      "methodCallLine": "[complex expression].encodeToString([complex expression])",
      "line": "73-73"
    },
    {
      "methodName": "getEncoder",
      "methodCallLine": "[complex expression].getEncoder()",
      "line": "73-73"
    },
    {
      "methodName": "println",
      "methodCallLine": "[complex expression].println([complex expression])",
      "line": "74-74"
    },
    {
      "methodName": "getCipherInstance",
      "methodCallLine": "[complex expression].getCipherInstance([complex expression], [complex expression])",
      "line": "77-77",
      "thirdPartyInfo": {
        "external_functions": [
          "getCryptoCipher"
        ],
        "internal_functions": [],
        "self": {
          "line": "54-60",
          "file": "../asts/Utils.json",
          "className": "Optional[org.apache.commons.crypto.utils.Utils]"
        }
      }
    },
    {
      "methodName": "init",
      "methodCallLine": "[complex expression].init([complex expression], [complex expression], [complex expression])",
      "line": "78-78"
    },
    {
      "methodName": "update",
      "methodCallLine": "[complex expression].update([complex expression], [complex expression], [complex expression], [complex expression], [complex expression])",
      "line": "80-80"
    },
    {
      "methodName": "decode",
      "methodCallLine": "[complex expression].decode([complex expression])",
      "line": "80-80"
    },
    {
      "methodName": "getDecoder",
      "methodCallLine": "[complex expression].getDecoder()",
      "line": "80-80"
    },
    {
      "methodName": "decode",
      "methodCallLine": "[complex expression].decode([complex expression])",
      "line": "80-80"
    },
    {
      "methodName": "getDecoder",
      "methodCallLine": "[complex expression].getDecoder()",
      "line": "80-80"
    },
    {
      "methodName": "doFinal",
      "methodCallLine": "[complex expression].doFinal([complex expression], [complex expression], [complex expression], [complex expression], [complex expression])",
      "line": "81-81"
    },
    {
      "methodName": "decode",
      "methodCallLine": "[complex expression].decode([complex expression])",
      "line": "81-81"
    },
    {
      "methodName": "getDecoder",
      "methodCallLine": "[complex expression].getDecoder()",
      "line": "81-81"
    },
    {
      "methodName": "arraycopy",
      "methodCallLine": "[complex expression].arraycopy([complex expression], [complex expression], [complex expression], [complex expression], [complex expression])",
      "line": "83-83"
    },
    {
      "methodName": "println",
      "methodCallLine": "[complex expression].println([complex expression])",
      "line": "84-84"
    },
    {
      "methodName": "trim",
      "methodCallLine": "[complex expression].trim()",
      "line": "84-84"
    },
    {
      "methodName": "sayGoodbye",
      "methodCallLine": "sayGoodbye()",
      "line": "86-86"
    }
  ]
}