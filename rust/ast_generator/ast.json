{"children":[{"children":[{"children":[{"children":[{"children":[{"children":[{"children":[{"children":[{"children":[{"children":[{"children":[{"children":[],"end_position":{"column":28,"row":27},"start_position":{"column":12,"row":27},"text":"game.key_pressed","type":"field_expression"}],"end_position":{"column":33,"row":27},"start_position":{"column":12,"row":27},"text":"game.key_pressed(key)","type":"call_expression"}],"end_position":{"column":34,"row":27},"start_position":{"column":12,"row":27},"text":"game.key_pressed(key);","type":"expression_statement"}],"end_position":{"column":9,"row":28},"start_position":{"column":64,"row":26},"text":"{\n            game.key_pressed(key);\n        }","type":"block"}],"end_position":{"column":9,"row":28},"start_position":{"column":8,"row":26},"text":"if let Some(Button::Keyboard(key)) = event.press_args() {\n            game.key_pressed(key);\n        }","type":"if_expression"}],"end_position":{"column":9,"row":28},"start_position":{"column":8,"row":26},"text":"if let Some(Button::Keyboard(key)) = event.press_args() {\n            game.key_pressed(key);\n        }","type":"expression_statement"},{"children":[{"children":[{"children":[],"end_position":{"column":22,"row":29},"start_position":{"column":8,"row":29},"text":"window.draw_2d","type":"field_expression"}],"end_position":{"column":10,"row":32},"start_position":{"column":8,"row":29},"text":"window.draw_2d(&event, |c, g, t| {\n            clear(BACK_COLOR, g);\n            game.draw(&c, g);\n        })","type":"call_expression"}],"end_position":{"column":11,"row":32},"start_position":{"column":8,"row":29},"text":"window.draw_2d(&event, |c, g, t| {\n            clear(BACK_COLOR, g);\n            game.draw(&c, g);\n        });","type":"expression_statement"},{"children":[{"children":[{"children":[],"end_position":{"column":20,"row":34},"start_position":{"column":8,"row":34},"text":"event.update","type":"field_expression"}],"end_position":{"column":10,"row":36},"start_position":{"column":8,"row":34},"text":"event.update(|arg| {\n            game.update(arg.dt);\n        })","type":"call_expression"}],"end_position":{"column":11,"row":36},"start_position":{"column":8,"row":34},"text":"event.update(|arg| {\n            game.update(arg.dt);\n        });","type":"expression_statement"}],"end_position":{"column":5,"row":37},"start_position":{"column":42,"row":25},"text":"{\n        if let Some(Button::Keyboard(key)) = event.press_args() {\n            game.key_pressed(key);\n        }\n        window.draw_2d(&event, |c, g, t| {\n            clear(BACK_COLOR, g);\n            game.draw(&c, g);\n        });\n\n        event.update(|arg| {\n            game.update(arg.dt);\n        });\n    }","type":"block"}],"end_position":{"column":5,"row":37},"start_position":{"column":4,"row":25},"text":"while let Some(event) = window.next() {\n        if let Some(Button::Keyboard(key)) = event.press_args() {\n            game.key_pressed(key);\n        }\n        window.draw_2d(&event, |c, g, t| {\n            clear(BACK_COLOR, g);\n            game.draw(&c, g);\n        });\n\n        event.update(|arg| {\n            game.update(arg.dt);\n        });\n    }","type":"while_expression"}],"end_position":{"column":5,"row":37},"start_position":{"column":4,"row":25},"text":"while let Some(event) = window.next() {\n        if let Some(Button::Keyboard(key)) = event.press_args() {\n            game.key_pressed(key);\n        }\n        window.draw_2d(&event, |c, g, t| {\n            clear(BACK_COLOR, g);\n            game.draw(&c, g);\n        });\n\n        event.update(|arg| {\n            game.update(arg.dt);\n        });\n    }","type":"expression_statement"}],"end_position":{"column":1,"row":38},"start_position":{"column":10,"row":15},"text":"{\n    let (width, height) = (20, 20);\n    let mut window: PistonWindow =\n        WindowSettings::new(\"Snake\", [to_coord_u32(width), to_coord_u32(height)])\n            .exit_on_esc(true)\n            .build()\n            .unwrap();\n\n    let mut game = Game::new(width as i32, height as i32);\n\n    while let Some(event) = window.next() {\n        if let Some(Button::Keyboard(key)) = event.press_args() {\n            game.key_pressed(key);\n        }\n        window.draw_2d(&event, |c, g, t| {\n            clear(BACK_COLOR, g);\n            game.draw(&c, g);\n        });\n\n        event.update(|arg| {\n            game.update(arg.dt);\n        });\n    }\n}","type":"block"}],"end_position":{"column":1,"row":38},"start_position":{"column":0,"row":15},"text":"fn main() {\n    let (width, height) = (20, 20);\n    let mut window: PistonWindow =\n        WindowSettings::new(\"Snake\", [to_coord_u32(width), to_coord_u32(height)])\n            .exit_on_esc(true)\n            .build()\n            .unwrap();\n\n    let mut game = Game::new(width as i32, height as i32);\n\n    while let Some(event) = window.next() {\n        if let Some(Button::Keyboard(key)) = event.press_args() {\n            game.key_pressed(key);\n        }\n        window.draw_2d(&event, |c, g, t| {\n            clear(BACK_COLOR, g);\n            game.draw(&c, g);\n        });\n\n        event.update(|arg| {\n            game.update(arg.dt);\n        });\n    }\n}","type":"function_item"}],"end_position":{"column":0,"row":39},"start_position":{"column":0,"row":0},"text":"extern crate piston_window;\nextern crate rand;\nuse tree_sitter::{Language, Parser};\n\nmod draw;\nmod game;\nmod snake;\nuse piston_window::types::Color;\nuse piston_window::*;\n\nuse draw::to_coord_u32;\nuse game::Game;\n\nconst BACK_COLOR: Color = [0.5, 0.5, 0.5, 1.0];\n\nfn main() {\n    let (width, height) = (20, 20);\n    let mut window: PistonWindow =\n        WindowSettings::new(\"Snake\", [to_coord_u32(width), to_coord_u32(height)])\n            .exit_on_esc(true)\n            .build()\n            .unwrap();\n\n    let mut game = Game::new(width as i32, height as i32);\n\n    while let Some(event) = window.next() {\n        if let Some(Button::Keyboard(key)) = event.press_args() {\n            game.key_pressed(key);\n        }\n        window.draw_2d(&event, |c, g, t| {\n            clear(BACK_COLOR, g);\n            game.draw(&c, g);\n        });\n\n        event.update(|arg| {\n            game.update(arg.dt);\n        });\n    }\n}\n","type":"source_file"}